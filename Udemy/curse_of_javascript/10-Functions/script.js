'use strict';

///////////////////////////////////
// Default Parameters
/*

const bookings = [];

const createBooking = function(flightNum, numPassengers = 1, price = 199) {
    // ES5
    // numPassengers = numPassengers || 1;
    // price = price || 199;

    const booking = {
        flightNum,
        numPassengers,
        price,
    };
    console.log(booking);
    bookings.push(booking);
};

createBooking('LH123');*/

////////////////////////////////////////////////////////
// How passing arguments works: Value vs. Reference
/*
const flight = 'LH234';
const Euclides = {
    name: 'Euclides Rodriuges Junior',
    passport: 32488795415,
};

const checkIn = function(flightNum, passenger) {
    flightNum = 'LH999';
    passenger.name = 'Mr. ' + passenger.name;

    passenger.passport === 32488795415 ?
        alert('Checked In') :
        alert('Wrong passport');
};

checkIn(flight, Euclides);
console.log(flight);
console.log(Euclides);

// Is the same as doing... memory heap
// const flightNum = flight;
// const passenger = Euclides;

const newPassport = function(person) {
    person.passport = Math.trunc(Math.random() * 1000000000);
};

newPassport(Euclides);
checkIn(flight, Euclides);
// JavaScript don't pass for reference
*/

//////////////////////////////////////////////
// First-Class and Higher-Order Functions

/*
Portanto, JS Ã© uma lingugagem que possui funÃ§Ãµes de primeira classe, o que em termos
tÃ©cnicos significa que as funÃ§Ãµes sÃ£o os chamados de primeiros cidadÃ£os. Na prÃ¡tica,
isso significa que as funÃ§Ãµes sÃ£o simplesmente tratadas como valores. No JavaScript
as funÃ§Ãµes sÃ£o apenas outro tipo de objeto, devido a ocasiÃ£o, uma vez que objetos sÃ£o
valores, funÃ§Ãµes sÃ£o valores tambÃ©m.

TambÃ©m podemos passar funÃ§Ãµes como argumentos para outras funÃ§Ãµes, como tambÃ©m podemos
retornar uma funÃ§Ã£o de outra funÃ§Ã£o. LEMBRE-SE, funÃ§Ãµes sÃ£o objetos e muitos tipos de 
objetos em JS tÃªm mÃ©todos. JavaScript tem funÃ§Ãµes de primeira classe, o que torna possÃ­vel
usarmos e escrevermos funÃ§Ãµes de ordem superior. Onde uma funÃ§Ã£o de ordem superior Ã© uma
funÃ§Ã£o que recebe outra funÃ§Ã£o como um argumento ou uma funÃ§Ã£o que retorna uma nova funÃ§Ã£o.

Example:
function count() {
    let counter = 0;
    return function() {
        counter++
    }
}
*/

///////////////////////////////////////////
// Functions Accepting Callback Functions
/*
const oneWord = function(str) {
    return str.replace(/ /g, '').toLowerCase();
};

const upperFirstWord = function(str) {
    const [first, ...others] = str.split(' ');
    return [first.toUpperCase(), ...others].join(' ');
};

// Higher-order function
const transformer = function(str, fn) {
    console.log(`Original string: ${str}`);
    console.log(`Transformed string: ${fn(str)}`);
    // fn fica acessÃ­vel para saber o name da funÃ§Ã£o que lhe foi passada
    console.log(`Transformed by: ${fn.name}`);
};

transformer('JavaScript is the best!', upperFirstWord);
transformer('JavaScript is the best!', oneWord);

// JS uses callbacks all the time
const high5 = function() {
    console.log('ðŸ‘‹');
};
document.body.addEventListener('click', high5);
['Jonas', 'Martha', 'Adam'].forEach(high5);
*/

///////////////////////////////////////////
// Funsctions Returning Functions
/*
const greet = function(greeting) {
    return function(name) {
        console.log(`${greeting} ${name}`);
    };
};

const greeterHey = greet('Hey');
greeterHey('Euclides');
greeterHey('VerÃ´nica');

const greetArr = greeting => name => console.log(`${greeting} ${name}`);
greetArr('Hello')('Euclides');
*/

//////////////////////////////////
// The call and apply Methods