'use strict';

///////////////////////////////////
// Default Parameters
/*

const bookings = [];

const createBooking = function(flightNum, numPassengers = 1, price = 199) {
    // ES5
    // numPassengers = numPassengers || 1;
    // price = price || 199;

    const booking = {
        flightNum,
        numPassengers,
        price,
    };
    console.log(booking);
    bookings.push(booking);
};

createBooking('LH123');*/

////////////////////////////////////////////////////////
// How passing arguments works: Value vs. Reference
/*
const flight = 'LH234';
const Euclides = {
    name: 'Euclides Rodriuges Junior',
    passport: 32488795415,
};

const checkIn = function(flightNum, passenger) {
    flightNum = 'LH999';
    passenger.name = 'Mr. ' + passenger.name;

    passenger.passport === 32488795415 ?
        alert('Checked In') :
        alert('Wrong passport');
};

checkIn(flight, Euclides);
console.log(flight);
console.log(Euclides);

// Is the same as doing... memory heap
// const flightNum = flight;
// const passenger = Euclides;

const newPassport = function(person) {
    person.passport = Math.trunc(Math.random() * 1000000000);
};

newPassport(Euclides);
checkIn(flight, Euclides);
// JavaScript don't pass for reference
*/

//////////////////////////////////////////////
// First-Class and Higher-Order Functions

/*
Portanto, JS √© uma lingugagem que possui fun√ß√µes de primeira classe, o que em termos
t√©cnicos significa que as fun√ß√µes s√£o os chamados de primeiros cidad√£os. Na pr√°tica,
isso significa que as fun√ß√µes s√£o simplesmente tratadas como valores. No JavaScript
as fun√ß√µes s√£o apenas outro tipo de objeto, devido a ocasi√£o, uma vez que objetos s√£o
valores, fun√ß√µes s√£o valores tamb√©m.

Tamb√©m podemos passar fun√ß√µes como argumentos para outras fun√ß√µes, como tamb√©m podemos
retornar uma fun√ß√£o de outra fun√ß√£o. LEMBRE-SE, fun√ß√µes s√£o objetos e muitos tipos de 
objetos em JS t√™m m√©todos. JavaScript tem fun√ß√µes de primeira classe, o que torna poss√≠vel
usarmos e escrevermos fun√ß√µes de ordem superior. Onde uma fun√ß√£o de ordem superior √© uma
fun√ß√£o que recebe outra fun√ß√£o como um argumento ou uma fun√ß√£o que retorna uma nova fun√ß√£o.

Example:
function count() {
    let counter = 0;
    return function() {
        counter++
    }
}
*/

///////////////////////////////////////////
// Functions Accepting Callback Functions
/*
const oneWord = function(str) {
    return str.replace(/ /g, '').toLowerCase();
};

const upperFirstWord = function(str) {
    const [first, ...others] = str.split(' ');
    return [first.toUpperCase(), ...others].join(' ');
};

// Higher-order function
const transformer = function(str, fn) {
    console.log(`Original string: ${str}`);
    console.log(`Transformed string: ${fn(str)}`);
    // fn fica acess√≠vel para saber o name da fun√ß√£o que lhe foi passada
    console.log(`Transformed by: ${fn.name}`);
};

transformer('JavaScript is the best!', upperFirstWord);
transformer('JavaScript is the best!', oneWord);

// JS uses callbacks all the time
const high5 = function() {
    console.log('üëã');
};
document.body.addEventListener('click', high5);
['Jonas', 'Martha', 'Adam'].forEach(high5);
*/

///////////////////////////////////////////
// Funsctions Returning Functions
/*
const greet = function(greeting) {
    return function(name) {
        console.log(`${greeting} ${name}`);
    };
};

const greeterHey = greet('Hey');
greeterHey('Euclides');
greeterHey('Ver√¥nica');

const greetArr = greeting => name => console.log(`${greeting} ${name}`);
greetArr('Hello')('Euclides');
*/

//////////////////////////////////
// The call and apply Methods

const lufthansa = {
    airline: 'Lufthansa',
    iataCode: 'LH',
    bookings: [],
    // book: function
    book(flightNum, name) {
        console.log(
            `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
        );
        this.bookings.push({ flight: `${this.iataCode}${flightNum} `, name });
    },
};

// lufthansa.book(239, 'Euclides Rodrigues Junior');
// lufthansa.book(635, 'Ver√¥nica Cordeiro Rodrigues');
// console.log(lufthansa);

const eurowings = {
    name: 'Eurowings',
    iataCode: 'EW',
    bookings: [],
};

const book = lufthansa.book;

// Does NOT work
// book(23, 'Sarah Williams)

// book.call(eurowings, 23, 'Sarah Williams');
// console.log(eurowings);

// The assigment "call" do realizity comunication between one function and another
// howerver much the method was inside the function lufthansa, we can access in the
// method in another function.
// "Call" nada mais √© do que um ponteiro.

const swiss = {
    name: 'Swiss Air Lines',
    iataCode: 'LX',
    bookings: [],
};

// book.call(swiss, 53, 'Mary Cooper');

// Apply Method
const flightData = [583, 'George Cooper'];
/* Mas "apply" n√£o √© mais usado do js moderno, "apply" tem a necessidade de ter uma matriz de dados porque h√° um jeito melhor
call pode usar os '...', assim inserindo apenas um array de dados continuos
book.apply(swiss, flightData);

book.call(swiss, ...flightData);
console.log(swiss);

/////////////////////////////////////////////////////////
// The bind Method
/* Just like the call method, bind also allows us to access a method from another function, however
bind does not immediately call a function, but returns a new function where the word 'diski' is linked
book.call(eurowings, 23, 'Sarah Williams');

const bookEW = book.bind(eurowings);
const bookLH = book.bind(lufthansa);
const bookLX = book.bind(swiss);

bookEW(23, 'Steven Williams');
*/
const bookEW23 = book.bind(eurowings, 23);
// bookEW23('Jonas Schmedtmann');
// bookEW23('Martha Cooper');

// With Event Listeners
lufthansa.planes = 300;
lufthansa.buyPlane = function() {
    console.log(this);

    this.planes++;
    console.log(this.planes);
};

document
    .querySelector('.buy')
    .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));
/* Para que seja poss√≠vel acessar a fun√ß√£o "buyplane" √© necess√°rio colocar um ponteiro para ela
uma key, call chamaria instantaneamente, mas n√£o queremos isso, queremos s√≥ durante o evento
por isso usamaos bind */

// Partial Aplication